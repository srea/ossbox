# MFSideMenu
=======

This project was inspired by the Facebook iOS app. The idea is to give a slideout menu to a UINavigationController-based app.

=======

[![](http://i.imgur.com/Ah5mP.png)
[![](http://i.imgur.com/KN4IB.png)

Features
=======
- Universal device support (iPhone + iPad)
- Universal orientation support (Portrait + Landscape)
- The menu can display on the left or right side of the screen.
- Support for UINavigationController or UITabBarController as the window's rootViewController.
- Toggle the menu by pressing the UIBarButtonItem or by dragging your UINavigationController to the side.
- When the menu is visible you can tap or drag it back to the closed position.
- Optional shadow between UINavigationController and menu
- Lightweight, simple and readable code.


Basic Setup
=======
The example project shows how to use the full configuration. It also includes an example of how to use the app with a UITabBarController. MFSideMenu uses ARC. If you have a project that doesn't use ARC, just add the `-fobjc-arc` compiler flag to the MFSideMenu files.

Note: QuartzCore is required for shadow rendering

1. Bring the MFSideMenu folder into your project.
2. Create your menu (a UITableViewController -- in the demo this is the SideMenuViewController class)
3. Initiate MFSideMenu in your app delegate:<br />
	```objective-c                                             
    MFSideMenu *sideMenu = [MFSideMenu menuWithNavigationController:navigationController
                                            leftSideMenuController:leftSideMenuController
                                            rightSideMenuController:rightSideMenuController];
                                                 
    self.window.rootViewController = navigationController;
    [self.window makeKeyAndVisible];
    ```


Configuration
=======
Checkout MFSideMenu.h to get the full gist of the configuration options.

- **MFSideMenuPanMode** lets you control the areas that can be panned in order to show the menu. You can use this to disable panning on the UINavigationBar or on the body of the UINavigationController.
- **MFSideMenuState** tells you the current state of the menu (left menu open, right menu open, or closed)
- **MFSideMenuStateEventBlock** can be used to receive notifications of MFSideMenuStateEvents. You can do this like so:<br />

```objective-c
    self.navigationController.sideMenu.menuStateEventBlock = ^(MFSideMenuStateEvent event) {
        switch (event) {
            case MFSideMenuStateEventMenuWillOpen:
                // the menu will open
                break;
            case MFSideMenuStateEventMenuDidOpen:
                // the menu finished opening
                break;
            case MFSideMenuStateEventMenuWillClose:
                // the menu will close
                break;
            case MFSideMenuStateEventMenuDidClose:
                // the menu finished closing
                break;
        }
    }; 
```
    
Contact
=======

mike@viamike.com<br />
http://viamike.com<br />
http://twitter.com/mike_frederick
